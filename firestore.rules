rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user has an 'admin' role.
    // This requires a 'users' collection where each document ID is a user's UID,
    // and each document contains a 'role' field.
    // Example: /users/{uid} -> { role: 'admin' }
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Ruletas collection:
    // Anyone can read the raffle history.
    // Writes are only allowed from the server (via Server Actions), so client writes are denied.
    match /ruletas/{ruletaId} {
      allow read: if true;
      allow write: if false;
    }

    // Retiros collection:
    // Anyone can read the withdrawal history.
    // Writes are only allowed from the server, so client writes are denied.
    match /retiros/{retiroId} {
      allow read: if true;
      allow write: if false;
    }

    // Funds summary document:
    // Anyone can read the funds summary.
    // Writes are only allowed from the server, so client writes are denied.
    match /funds/summary {
      allow read: if true;
      allow write: if false;
    }

    // Users collection:
    // Allow users to read their own data.
    // Allow admins to read any user's data (for potential future admin panels).
    // Only admins can create, update, or delete user roles.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin();
      allow write: if isAdmin();
    }
  }
}
