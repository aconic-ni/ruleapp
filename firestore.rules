
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      // Check if the user is authenticated and if their UID exists in the 'users' collection
      // with the role of 'admin'. The document ID in 'users' must match the user's UID.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Ruletas collection:
    // - Allow anyone to read.
    // - Only allow authenticated admins to create, update, or delete.
    // Writes are handled by secure server-side actions, which run with the user's auth context.
    match /ruletas/{raffleId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Retiros collection:
    // - Allow anyone to read.
    // - Only allow authenticated admins to create, update, or delete.
    // Writes are handled by secure server-side actions.
    match /retiros/{withdrawalId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Funds summary document:
    // - Allow anyone to read.
    // - Only allow authenticated admins to write. Updates are handled by server actions.
    match /funds/summary {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Users collection:
    // - Admins can read user roles.
    // - No one can write to user roles from the client-side to prevent privilege escalation.
    match /users/{userId} {
      allow read: if isAdmin();
      allow write: if false;
    }
  }
}
